System can handle four types of plastics:
	ABS
	Polypropylene
	Polyethelene
	PET
	If the plastic is unknown, default to ABS
		cout << "  <>Unknown plastic |<unknown plastic>| defaulting to ABS.\n";
Handle orders upto 50,000:
	If no size specified, default to 100
	If size > 50,000, default to 50,000
		cout << "  <>No size specified, defaulting to 100.\n";
Implement the following three Packagers:
	Bulk (just dump part to output bin)
	ShrinkWrap
	HardPack
	If Packager unknown, default to Bulk
		cout << "  <>Unknown packager |<unknown packager>| defaulting to Bulk packager.\n";
Support three injection molding machines:
	IJM_110 - good for aluminum molds with 1 cavity
	IJM_120 - good for aluminum molds with 2 cavities
	IJM_210 - good for steel molds with 1 cavity
Support two mold metals:
	Aluminum
	Stainless steel
Support molds with multiple cavities:
	1 cavity
	2 cavities
Support two converyer belts:
	Linear
	Y-Split
Support two output bins:
	CardboarBox
	PallotBox
Setup the injection line based on run size and Packager:
	cout << "  Setup injection line for <size> run with <Packager> packager:\n";
	size <= 10,000: cout << "    IJM_110 - Aluminum(1) - Linear conveyer belt - CardboardBox\n";
	size <= 20,000: cout << "    IJM_120 - Aluminum(2) - Y-Split conveyer belt - CardboardBox\n";
	size <= 50,000: cout << "    IJM_210 - Steel(1) - Linear conveyer belt - PallotBox\n";

Process order:
	Get mold
	Insert tags into mold
	Load plastic, color die, and additive bins
	Simulate cycling the IJM for the specified plastic <size> times
		Just once, specify the injection cycle (depends on plastic type)
		Just once, simulate a full parts bin asking upline machines to pause
	Clean the mold (ignore molds that are used up, clean them all)

Support three mold shapes with specified volumes in cc:
	duck (35 cc)
	car (40 cc)
	hero (50 cc)
Molds are be pulled fron inventory or milled from bulk metal
	(To keep the final simple, the order will specify the mold location.)
		If location and shape unknown, default to duck from inventory
		cout << "    <>Can't find place |<loc>| to get |<shape>| mold from, defaulting to duck from inventory.\n";
	Inventory:
		cout << "    Pull <shape> mold from inventory.\n";
	Mill:
		cout << "    Create <shape> mold from mill with <n> cavities:\n"
Shapes are milled with three techniques (actual steps simulated, see "couts" below):
	drill
	cut
	grind
Support two finishes:
	smooth
	rippled
Support two milling platforms:
	HighCarbon tools (suitable for aluminum)
		cout << "      using HighCarbon tools (drill, cut, and high speed grind) to mill <metal> block into <n> <shape> shapes with <finish> finish.\n";
	Carbide tools (suitable for steel)
		cout << "      using Carbide tools (high speed drill, cross cut, and layer grind) to mill <metal> block into <n> <shape> shapes with <finish> finish.\n";

Support three tags, widths in mm (inserted into molds, typically under the support base, think plastic toy):
	ModelNumber (2 mm)
	Country (2 mm)
	Date (2 mm)
	Total space for tags is 20 mm
		 cout << "    Insert tags [space separated list of tags ] of width <n>/20 mm.\n";
	Ignore unknown tags
		 cout << "Ignoring unknown tag <tag>.\n"
Support two additives, the order specifies the volume in cc:
	UVInhibiter
	AntiBacterial
Support six colors (for simplicity, assume volume is 10% of shape, and die is independent of plastic type):
	black
	brown
	red
	orange
	yellow
	green
	If no color specified, default to black.
		cout << "      <>No color specified, defaulting to black.\n";
Simulate mixing plastic, color, and additives with volume recipe & total (account for multiple cavities):
	cout << "    Load plastic, color, and additive bins.\n;
	cout << "      Recipe: <plastic>(<vol>) <color>(<vol>) <additive1>(<vol>) <additive2>(<vol>) Total = <vol>.\n";

Support three injection cycles, depends on plastic:
	ABS:  heat to 440 - inject at 125 PSI - cool to 360 - progressive eject
	Poly: heat to 350 - inject at  90 PSI - cool to 290 - smooth eject
	PET:  heat to 404 - inject at 110 PSI - cool to 340 - smooth eject
Support three upline machines pausing when package/output/parts bin is full:
	IJM
	Conveyer belt
	Packager
	Note: (The example output file is a little weak here, done more correctly, the diffs will be off a little.)
Simulate cycling the IJM for the specified plastic times
	cout << "    Cycle IJM for <plastic> <size> times.\n";
	cout << "      Close - heat to <temp> - inject at <psi> PSI - cool to <temp> - separate - <technique> eject.\n";
	cout << "      <Packager> package bin full...\n";
		 cout << "        IJM pausing while CardboardBox package bin is swapped.\n";
		cout << "        Conveyer belt pausing while CardboardBox package bin is swapped.\n";
		cout << "        Packager pausing while CardboardBox package bin is swapped.\n";

Clean the molds, depends on plastic and metal:
	Use existing cleaning methods (see namespace legacy)
	cout << "    Clean <plastic> <optional metal> mold: <cleaning steps>.\n";

Instrument the destructors:
	cout << "~<ClassName> ";
	Use newlines to logically group the class heirarchies
	Classes may be suffixed with design pattern name/abbreviation and/or presentation order

To get the diffs to zero:
	In main(int argc, char* args[]):
		cout << "Hello DP4.\n" << endl;
		final_design_file::demo(string(args[1]));	// Pass in the input file (orders_1.txt).
		cout << "Aloha DP4.\n";
